
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Frame, BOTH, END, messagebox

from backend.file_methods import obtain_folder_items
from backend.table_methods import get_ttk_table, tree_add_data, tree_remove_all_data
from backend.excel_methods import ExcelHandler

excel_handler = ExcelHandler()

class excel_generator:
    def relative_to_assets(self, path: str) -> Path:
        # Return the full path by joining ASSETS_PATH with the provided relative path
        return self.ASSETS_PATH / Path(path)

    def __init__(self, root):

        BASE_PATH = Path(__file__).resolve().parent.parent

        # Define the relative path to the assets directory
        ASSETS_REL_PATH = Path("assets/frame0")

        # Define the absolute path to the assets directory
        self.ASSETS_PATH = BASE_PATH / ASSETS_REL_PATH

        self.window = Frame(root)

        self.current_dirpath = None
        self.current_img_items = None
        self.current_spec_files = None
        # self.content_path = jsonify # save ocr formatting as a json file?
        self.file_name = None


        self.canvas = Canvas(
            self.window,
            bg = "#FFFFFF",
            height = 550,
            width = 700,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )

        self.canvas.place(x = 0, y = 0)
        self.canvas.create_rectangle(
            0.0,
            0.0,
            700.0,
            62.0,
            fill="#00116B",
            outline="")

        self.canvas.create_text(
            13.0,
            14.0,
            anchor="nw",
            text="Excel Generator",
            fill="#FFFFFF",
            font=("Inter Bold", 28 * -1)
        )

        self.image_image_1 = PhotoImage(
            file=self.relative_to_assets("image_1.png"))
        self.image_1 = self.canvas.create_image(
            491.0,
            306.0,
            image=self.image_image_1
        )

        self.canvas.create_rectangle(
            0.0,
            62.0,
            281.0,
            550.0,
            fill="#292929",
            outline="")

        self.canvas.create_rectangle(
            14.0,
            76.0,
            266.0,
            282.0,
            fill="#373737",
            outline="")

        self.canvas.create_rectangle(
            13.0,
            296.0,
            265.0,
            462.0,
            fill="#000000",
            outline="")

        self.image_image_2 = PhotoImage(
            file=self.relative_to_assets("image_2.png"))
        self.image_2 = self.canvas.create_image(
            140.0,
            150.0,
            image=self.image_image_2
        )

        self.button_image_1 = PhotoImage(
            file=self.relative_to_assets("button_1.png"))
        self.browse_folder_btn = Button(
            self.window,
            image=self.button_image_1,
            borderwidth=0,
            highlightthickness=0,
            relief="flat"
        )
        self.browse_folder_btn.place(
            x=75.0,
            y=222.0,
            width=131.0,
            height=32.0
        )

        self.image_image_3 = PhotoImage(
            file=self.relative_to_assets("image_3.png"))
        self.image_3 = self.canvas.create_image(
            490.0,
            221.0,
            image=self.image_image_3
        )

        self.image_image_4 = PhotoImage(
            file=self.relative_to_assets("image_4.png"))
        self.image_4 = self.canvas.create_image(
            490.0,
            458.0,
            image=self.image_image_4
        )

        self.button_image_3 = PhotoImage(
            file=self.relative_to_assets("button_3.png"))
        self.generate_btn = Button(
            self.window,
            image=self.button_image_3,
            borderwidth=0,
            highlightthickness=0,
            command= lambda: print("Hello"),
            relief="flat"
        )
        self.generate_btn.place(
            x=98.0,
            y=476.0,
            width=168.0,
            height=49.0
        )

        # self.generate_btn.config(state='disabled')

        self.button_image_4 = PhotoImage(
            file=self.relative_to_assets("button_4.png"))
        self.clear_btn = Button(
            self.window,
            image=self.button_image_4,
            borderwidth=0,
            highlightthickness=0,
            relief="flat"
        )
        self.clear_btn.place(
            x=13.0,
            y=476.0,
            width=75.0,
            height=49.0
        )

        self.button_image_5 = PhotoImage(
            file=self.relative_to_assets("button_5.png"))
        self.prev_sheet_btn = Button(
            self.window,
            image=self.button_image_5,
            borderwidth=0,
            highlightthickness=0,
            command= lambda: excel_handler.changeSheet(-1, self.canvas, self.label, 300, 107.5, 380, 245),
            relief="flat"
        )
        self.prev_sheet_btn.place(
            x=407.0,
            y=83.0,
            width=20.0,
            height=20.0
        )

        self.button_image_6 = PhotoImage(
            file=self.relative_to_assets("button_6.png"))
        self.next_sheet_btn = Button(
            self.window,
            image=self.button_image_6,
            borderwidth=0,
            highlightthickness=0,
            command= lambda: excel_handler.changeSheet(1, self.canvas, self.label, 300, 107.5, 380, 245),
            relief="flat"
        )
        self.next_sheet_btn.place(
            x=555.0,
            y=83.0,
            width=20.0,
            height=20.0
        )

        self.image_image_5 = PhotoImage(
            file=self.relative_to_assets("image_5.png"))
        self.canvas.create_image(
            491.0,
            93.0,
            image=self.image_image_5
        )

        self.label = self.canvas.create_text(
            429.0,
            84.0,
            anchor="nw",
            text="Sheet 1",
            fill="#000000",
            font=("Arial", 10)
        )

        self.canvas.create_text(
            491.0,
            389.0,
            anchor="nw",
            text="Export Excel ",
            fill="#1E2BA3",
            font=("Arial", 12)
        )

        self.entry_image_1 = PhotoImage(
            file=self.relative_to_assets("entry_1.png"))
        self.entry_bg_1 = self.canvas.create_image(
            393.0,
            458.5,
            image=self.entry_image_1
        )
        self.excel_stat = Text(
            self.window,
            bd=0,
            bg="#8D8D8D",
            fg="#000716",
            highlightthickness=0
        )
        self.excel_stat.place(
            x=320.0,
            y=389.0,
            width=146.0,
            height=137.0
        )

        self.canvas.create_text(
            490.0,
            424.0,
            anchor="nw",
            text="File Name",
            fill="#1E2BA3",
            font=("Arial", 10)
        )

        self.entry_image_2 = PhotoImage(
            file=self.relative_to_assets("entry_2.png"))
        self.entry_bg_2 = self.canvas.create_image(
            579.0,
            457.5,
            image=self.entry_image_2
        )
        self.file_name_entry = Entry(
            self.window,
            bd=0,
            bg="#FFFFFF",
            fg="#000716",
            highlightthickness=0
        )
        self.file_name_entry.place(
            x=500.0,
            y=445.0,
            width=158.0,
            height=23.0
        )

        self.button_image_7 = PhotoImage(
            file=self.relative_to_assets("button_7.png"))
        self.delete_excel_btn = Button(
            self.window,
            image=self.button_image_7,
            borderwidth=0,
            highlightthickness=0,
            relief="flat"
        )
        self.delete_excel_btn.place(
            x=490.0,
            y=479.0,
            width=52.0,
            height=45.0
        )

        self.button_image_8 = PhotoImage(
            file=self.relative_to_assets("button_8.png"))
        self.download_btn = Button(
            self.window,
            image=self.button_image_8,
            borderwidth=0,
            highlightthickness=0,
            relief="flat"
        )
        self.download_btn.place(
            x=550.0,
            y=480.0,
            width=118.0,
            height=45.0
        )

        self.download_btn.config(state='disabled')

        self.status_image = PhotoImage(
            file=self.relative_to_assets("image_7.png"))
        self.format_status = self.canvas.create_image(
            203.0,
            85.0,
            image=self.status_image
        )

        self.canvas.create_text(
            21.0,
            74.0,
            anchor="nw",
            text="Images",
            fill="#8F8F8F",
            font=("Arial", 14)
        )

        self.init_button_commands()

    # ============================== DIRECT BACKEND ===============================
    # init functions
    def init_button_commands(self):
        self.browse_folder_btn.config(command=self.display_dir_table)
        self.clear_btn.config(command=self.clear_dir_table)
        self.generate_btn.config(command=self.generate_excel)
        self.delete_excel_btn.config(command=self.remove_excel)
        self.download_btn.config(command=self.download_excel)

    # Directory Functions
    def display_dir_table(self):
        self.current_img_items, self.current_spec_files = obtain_folder_items()

        if self.current_img_items and self.current_spec_files:
            print(f'Directory Items: {self.current_img_items}')
            print(f'Special Files: {self.current_spec_files}')

            # Check if the format is right:
            if 'label.txt' not in self.current_spec_files:
                self.status_image = PhotoImage(file=self.relative_to_assets('image_8.png'))
                self.canvas.itemconfig(self.format_status, image=self.status_image)
            
            else:
                self.status_image = PhotoImage(file=self.relative_to_assets('image_6.png'))
                self.canvas.itemconfig(self.format_status, image=self.status_image)

                # Get data
                self.crops_info = {} # image: [type, group name (crop label), specs]
                table_crops_info = []

                for images in self.current_img_items:
                    image_name = ''.join(images.split('.')[:-1])
                    self.crops_info[image_name] = ('Category', 'fruits', '(1,2,3,4)')
                    table_crops_info.append([image_name, 'Category', 'fruits', '(1,2,3,4)'])
            
                self.crop_table = get_ttk_table(root=self.window , width=252, 
                                                column=['IMAGE', 'TYPE', 'LABEL', 'SPECS'], 
                                                data=table_crops_info
                                                )
                self.crop_table.place(
                    x=14.0,
                    y=98.0,
                    height=190
                )

                self.generate_btn.config(state='normal')
    
    def clear_dir_table(self):
        self.crop_table.place_forget()
        self.current_spec_files = None
        self.current_img_items = None
        self.generate_btn.config(state='disabled')

        # Set the format status to be detecting
        self.status_image = PhotoImage(file=self.relative_to_assets('image_7.png'))
        self.canvas.itemconfig(self.format_status, image=self.status_image)

        print('table cleared!')

    # Excel Function
    # Methodology (per image in images):
    # get image path -> ocr -> ocr sorting -> transfer into dataframe -> transfer into treeview -> display treeview
    def generate_excel(self):
        print('Generating Excel File')
       
       ## Change these to the data generated from scanning the image
        data = {
            "Items": [["Mala", "Mala", "none", 3.5, "Soup or Dry,Spicy Level,Ingredient"], ["Grilled Fish", "Grilled Fish", "none", 27.2, "Fish Flavour,Grilled Fish Addon"]],
            "Option Group": [["Soup or Dry", True, True], ["Spicy Level", True, True]],
            "Options": [["Soup or Dry", "Dry", 0], ["Soup or Dry", "Soup", 1], ["Spicy Level", "Level 1 - Less Spicy", 0]]
        }


        columns = { 
                "Items": ["Category", "Menu Item", "Description", "Costs", "Option Groups"],
                "Option Group": ["Option Groups", "Single", "Mandatory"],
                "Options": ["Option Group", "Option", "Cost"]
            }
        excel_handler.dataframe_to_excel(data, columns)
        excel_handler.loadSheet(self.canvas, self.label, 300, 107.5, 380, 245)
        # transfer into treeview
        # self.excel_preview_table = get_ttk_table(root=self.window, width=380)
        # self.excel_preview_table.place(
        #     x=300.0,
        #     y=107.5,
        #     height=245
        # )

        # show statistics of the treeview
        DUMMY_STATS_DATA = '\nGENERATED REPORT\n=================\nCategory: 4\nMenu Items: 12\nOption grp: 3\nOptions: 10\n\nFile Size: 4KB'
        
        self.excel_stat.delete(1.0, END)
        self.excel_stat.insert(END, DUMMY_STATS_DATA)
        self.excel_stat.config(state='disabled')
        self.download_btn.config(state='normal')

    def remove_excel(self):
        print('Excel Removed.')
        try:
            excel_handler.deleteSheet()
            self.excel_stat.config(state='normal')
            self.excel_stat.delete(1.0, END)
            self.canvas.itemconfig(self.label, text="") 

            self.file_name_entry.delete(0, END)
            self.download_btn.config(state='disabled')
        except:
            messagebox.showerror(title='AttributeError', message='application has no attribute "excel_preview_table".')


    def download_excel(self):
        set_file_name = self.file_name_entry.get().lstrip().rstrip()

        # Check for missing values
        if set_file_name not in ['', None]:
            # download the file
            self.excel_name = set_file_name
            print(f'File Name: {self.excel_name}')

        else:
            messagebox.showerror(title='DataFormatError',
                                    message='Please name your excel file.')


        
    # Page Functions
    def run(self):
        self.window.resizable(False, False)
        self.window.mainloop()

    def pack(self):
        self.window.pack(fill=BOTH, expand=True)

    def pack_forget(self):
        self.window.pack_forget()